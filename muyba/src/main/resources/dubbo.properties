#应用名
dubbo.application.name=muy-ba

#应用所有人
dubbo.application.owner=muy.com

#使用的第三方日志框架 默认优先级Log4j>SLF4J>Common Logging>JDK log 
#这里使用logback输出日志  那就使用SLF4J
dubbo.application.logger=slf4j

#服务提供方全局配置
#超时
dubbo.provider.timeout=100000
#负载均衡策略
dubbo.provider.loadbalance=random

#注册中心地址
#dubbo.address=redis://127.0.0.1:6379
dubbo.address=zookeeper://192.168.0.110:2181
#dubbo.address=zookeeper://127.0.0.1:2181
#dubbo.address=zookeeper://10.0.37.200:2181
#dubbo.address=zookeeper://121.40.223.119:2181

#dubbo协议端口
#dubbo.protocol.host=127.0.0.1

#dubbo调度方式
#Dispatcher
#all 所有消息都派发到线程池，包括请求，响应，连接事件，断开事件，心跳等。
#direct 所有消息都不派发到线程池，全部在IO线程上直接执行。
#message 只有请求响应消息派发到线程池，其它连接断开事件，心跳等消息，直接在IO线程上执行。
#execution 只请求消息派发到线程池，不含响应，响应和其它连接断开事件，心跳等消息，直接在IO线程上执行。
#connection 在IO线程上，将连接断开事件放入队列，有序逐个执行，其它消息派发到线程池。
#ThreadPool
#fixed 固定大小线程池，启动时建立线程，不关闭，一直持有。(缺省)
#cached 缓存线程池，空闲一分钟自动删除，需要时重建。
#limited 可伸缩线程池，但池中的线程数只会增长不会收缩。(为避免收缩时突然来了大流量引起的性能问题)。
dubbo.protocol.threadpool=fixed
dubbo.protocol.threads=100